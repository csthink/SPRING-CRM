<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.4//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.csthink.crm.dao.EmployeeDao">
    <!-- 自定义映射关系集合：主要包含对于一些自定义操作的配置，如不一致的属性和字段 -->
    <resultMap id="employeeMap" type="Employee" autoMapping="true">
        <!-- 绑定id主键 -->
        <id property="id" column="id" javaType="Integer"/>
        <!-- result配置，主要配置普通属性，column表示配置的是数据库字段名称 property配置的是实体类的属性名称 -->
        <result property="username" column="username" javaType="String"/>
        <result property="phone" column="phone" javaType="String"/>
        <result property="password" column="password" javaType="String"/>
        <result property="realName" column="real_name" javaType="String"/>
        <result property="birthDate" column="birth_date" javaType="Date"/>
        <result property="photo" column="photo" javaType="String"/>
        <result property="gender" column="gender" javaType="String"/>
        <result property="hireDate" column="hire_date" javaType="Date"/>
        <result property="deptId" column="dept_id" javaType="Integer"/>
        <result property="createTime" column="create_time" javaType="Date"/>
        <result property="updateTime" column="update_time" javaType="Date"/>
        <association property="department" column="dept_id" resultMap="com.csthink.crm.dao.DepartmentDao.departmentMap" columnPrefix="d_"/>
    </resultMap>

    <sql id="employeeFields">
       `id`, `username`,`phone`,`password`,`real_name`,`birth_date`,`photo`,`gender`,`hire_date`,`dept_id`,`create_time`,`update_time`
    </sql>

    <sql id="employeeDepartmentFields">
        employee.`id`,
        `username`,
        `phone`,
        `password`,
        `real_name`,
        `birth_date`,
        `photo`,
        `gender`,
        `hire_date`,
        `dept_id`,
        `create_time`,
        `update_time`,
        department.`id` AS d_id,
        department.`dept_name` AS d_dept_name
    </sql>

    <select id="selectById" parameterType="Integer" resultMap="employeeMap">
        SELECT
            <include refid="employeeDepartmentFields"></include>
        FROM `employee` JOIN  `department`
        ON `employee`.`dept_id` = `department`.`id`
        WHERE `employee`.`id` = #{id}
    </select>

    <select id="selectAll" parameterType="Integer" resultMap="employeeMap">
        SELECT
        <include refid="employeeDepartmentFields"></include>
        FROM `employee` JOIN  `department`
        ON `employee`.`dept_id` = `department`.`id`
        ORDER BY `employee`.`create_time` DESC
    </select>

    <insert id="insert" parameterType="Employee" useGeneratedKeys="true">
        INSERT INTO `employee`(<include refid="employeeFields"></include>)
        VALUES(null, #{username},#{phone},#{password},#{realName},#{birthDate},#{photo},#{gender},#{hireDate},#{deptId},#{createTime},#{updateTime})
    </insert>

    <delete id="delete" parameterType="Integer">
        DELETE FROM `employee` WHERE `id` = #{id}
    </delete>

    <update id="update" parameterType="Employee">
        UPDATE `employee`
        <set>
            <if test="null != username">username=#{username},</if>
            <if test="null != phone">phone=#{phone},</if>
            <if test="null != password">password=#{password},</if>
            <if test="null != realName">real_name=#{realName},</if>
            <if test="null != birthDate">birth_date=#{birthDate},</if>
            <if test="null != photo">photo=#{photo},</if>
            <if test="null != gender">gender=#{gender},</if>
            <if test="null != hireDate">hire_date=#{hireDate},</if>
            <if test="null != deptId">dept_id=#{deptId},</if>
            <if test="null != createTime">create_time=#{createTime},</if>
            <if test="null != updateTime">update_time=#{updateTime}</if>
        </set>
        where `id` = #{id}
    </update>
</mapper>